service: mcbrokenio
variablesResolutionMode: 20210326
useDotenv: true

frameworkVersion: '3'

package:
  excludeDevDependencies: true

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-log-subscription

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: mcbrokenio-paulbtw-dev
  tags:
    project: mcbrokenio
    owner: paulbtw
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource: '*'
    - Effect: Allow
      Action:
        - secretmanager:GetSecretValue
      Resource:
        - 'arn:aws:secretsmanager:eu-central-1:*:secret:*'
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:GetObjectVersion
      Resource:
        - arn:aws:s3:::*
  httpApi:
      cors: true

custom:
  mcdInfo:
    basicTokenEU: ${env:BASIC_TOKEN_EU, ssm(eu-central-1):/mcdonalds/eu/basictoken}
    mcdDeviceId: ${env:MCD_DEVICEID, ssm(eu-central-1):/mcdonalds/eu/deviceId}
    databaseUrl: ${env:DATABASE_URL, ssm(eu-central-1):/mcdonalds/database}
    exportBucket: ${env:EXPORT_BUCKET, ssm(eu-central-1):/mcdonalds/export/bucket}-${opt:stage, 'dev'}
    mcdElKey: ${env:KEY, ssm(eu-central-1):/mcdonalds/el/key}
    basicTokenEL: ${env:BASIC_TOKEN_EL, ssm(eu-central-1):/mcdonalds/el/basictoken}
    basicTokenUS: ${env:BASIC_TOKEN_US, ssm(eu-central-1):/mcdonalds/us/basictoken}
    basicTokenAP: ${env:BASIC_TOKEN_AP, ssm(eu-central-1):/mcdonalds/ap/basictoken}
    apiKeyAP: ${env:API_KEY_AP, ssm(eu-central-1):/mcdonalds/ap/apikey}

functions:
  getIceMaschineStatus:
    handler: src/functions/getIceMaschineStatus/handler.main
    memorySize: 512
    timeout: 600
    environment:
      BASIC_TOKEN_EU: ${self:custom.mcdInfo.basicTokenEU}
      BASIC_TOKEN_EL: ${self:custom.mcdInfo.basicTokenEL}
      BASIC_TOKEN_US: ${self:custom.mcdInfo.basicTokenUS}
      BASIC_TOKEN_AP: ${self:custom.mcdInfo.basicTokenAP}
      DATABASE_URL: ${self:custom.mcdInfo.databaseUrl}
      MCD_DEVICEID: ${self:custom.mcdInfo.mcdDeviceId}
      API_KEY_AP: ${self:custom.mcdInfo.apiKeyAP}
    events:
      - schedule: cron(0/10 * * * ? *)
  getAllStores:
    handler: src/functions/getAllStores/handler.main
    memorySize: 512
    timeout: 900
    environment:
      BASIC_TOKEN_EU: ${self:custom.mcdInfo.basicTokenEU}
      BASIC_TOKEN_EL: ${self:custom.mcdInfo.basicTokenEL}
      BASIC_TOKEN_US: ${self:custom.mcdInfo.basicTokenUS}
      BASIC_TOKEN_AP: ${self:custom.mcdInfo.basicTokenAP}
      DATABASE_URL: ${self:custom.mcdInfo.databaseUrl}
      KEY: ${self:custom.mcdInfo.mcdElKey}
      API_KEY_AP: ${self:custom.mcdInfo.apiKeyAP}
    events:
      - schedule: cron(0 0/6 * * ? *)
  createJson:
    handler: src/functions/createJson/handler.main
    memorySize: 512
    timeout: 60
    environment:
      BUCKET: ${self:custom.mcdInfo.exportBucket}
      DATABASE_URL: ${self:custom.mcdInfo.databaseUrl}
    events:
      - schedule: cron(0/15 * * * ? *)
  getLocation:
    handler: src/functions/getLocation/handler.main
    memorySize: 128
    timeout: 5
    events:
      - httpApi:
          method: GET
          path: /
  cleanupDatabase:
    handler: src/functions/cleanupDatabase/handler.main
    environment:
      DATABASE_URL: ${self:custom.mcdInfo.databaseUrl}
    memorySize: 128
    timeout: 300
    events:
      - schedule: cron(0 0 * * ? *)
